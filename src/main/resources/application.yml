## API 호출 시 SQL 문 출력
spring:
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        #        show_sql: true 시스템아웃을 통해 찍음
        format_sql: true
## 순환 참조 에러 제거
  main:
    allow-circular-references: true
## Mysql 상세 지정
    database: mysql

  mvc:
    static-path-pattern: /**
  web:
    resources:
      static-locations: classpath:/static/,classpath:/public/,classpath:/,classpath:/resources/,classpath:/META-INF/resources/

  ## Mysql 기본 설정
  datasource:
    url: ENC(ve8nX3UyUztK39L1bwLNSNpSIUFU6hijhPp/nLchG1bz/R0xWo65JMW1Q61dPzMlZHHItkFOq2jqunsAb1IQKDr8WOqKXArwbQjwhZmW1r/5rSMNLfgVG5Vqp0EG75Obujt+eMcMng4=)
    username: ENC(CRtDDOYA5iA58jbdUQN+Zw==)
    password: ENC(iuvYDPplQkEgB7ckTufyCRrmSDHBeOma)
    driver-class-name: com.mysql.cj.jdbc.Driver

  sql:
    init:
      mode: always
      schema-locations: classpath:batch-schema.sql

  ## 파일 크기 지정
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

## redis 설정
  data:
    redis:
      host: localhost
      port: 6379
      password: ENC(oIZ4bIZiFdpQI13RUDd0Fw==)

# Oauth 설정
  security:
    oauth2:
      naver:
        client-id: ENC(3dgcJo96iBNBLoy9sR8BOfRKIt1cWNoi4Gj432CFZ08=)
        client-secret: ENC(4O7RCG1S9fnlDxZX6jtUhyAmEUFAq4B2)
        scope: name,email,age,gender,birthday,birthyear,mobile
        client-name: Naver
        authorization-grant-type: authorization_code
        redirect-url: http://localhost:8080/auth/naver/callback
        authorization: https://nid.naver.com/oauth2.0/authorize
        token-uri: https://nid.naver.com/oauth2.0/token
        user-info-uri: https://openapi.naver.com/v1/nid/me
        user-name-attribute: response


jwt:
  secret: ENC(bFw/rS0aB/ppcvo42Xp8Ge0k6LGmBjLcv6dCbNDoEUFH0KWoekU7ph2R0ZN40IrUHnRikMXVHbtFs68mCaOzEs5SaTUYookBlVX6rBo38mYrccD/xRvUgZfT/PHa8XKRPJdylznzelPL7tJSdwaT+lQpEmV8HGDTHtkUVBLSVdYBqa62gpnVtg==)
  token-validity-in-seconds: 2592000  # 60 * 15 15분 -> 초
  refresh-token-validity-in-seconds: 2592000 #1209600 # 60 * 60 * 24 * 30 30일 -> 초


cloud:
  aws:
    credentials:
      accessKey: ENC(onER3Px/ZP7tB6SWIXlANzukRG6ajeHnIoIBm7ysp7Q=)
      secretKey: ENC(jeQbOEk9b6p929KLCBALuTN4NXDnAKONqOza/mEvWrNKOWcd0jzNO1Cdkj381uC5HJvw4scC8+g=)
    s3:
      bucket: doggywalky-bucket
    region:
      static: ap-northeast-2
    stack:
      auto: false

#logging:
#  level:
#    root: INFO
#    com:
#      amazonaws: DEBUG
#      amazonaws.util.EC2MetadataUtils: ERROR
#    org:
#      springframework:
#        web: DEBUG
#    org.hibernate.SQL: debug
#    org.hibernate.type: trace
#    p6spy: DEBUG
logging:
  level:
    root: DEBUG
    org:
      springframework:
        security: DEBUG
    org.springframework: DEBUG
    org.junit.jupiter: DEBUG

## p6spy query logging
decorator:
  datasource:
    p6spy:
      enable-logging: true

symmetricCrypto:
  secret: ENC(QchXUC63mdnEHtUcFlr4STq4nThoa1L3LDhokjUx1GNRKKYWYD38h5zw2mrjFzdzU5Sfjn3KYbA=)



